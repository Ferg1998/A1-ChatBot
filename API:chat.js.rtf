{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import OpenAI from "openai";\
\
const client = new OpenAI(\{ apiKey: process.env.OPENAI_API_KEY \});\
\
export default async function handler(req, res) \{\
  if (req.method !== "POST") return res.status(405).json(\{ error: "Method not allowed" \});\
\
  try \{\
    const \{ message \} = req.body || \{\};\
    if (!message) return res.status(400).json(\{ error: "Missing 'message'" \});\
\
    // Instruction so the bot stays on topic (tweak for your gym)\
    const instructions = `\
You are A1 Performance Club's website concierge. \
Answer only questions about classes, prices (speak in ranges), trials, schedule, location, and booking.\
If off-topic, say: "I can help with A1 questions\'97want to book a trial?"\
Keep answers under 120 words.`;\
\
    const r = await client.responses.create(\{\
      model: "gpt-4o-mini",        // great quality/cost balance\
      instructions,\
      input: [\{ role: "user", content: message \}]\
    \});\
\
    // Unified text output helper\
    const reply = r.output_text ?? "Sorry, I didn\'92t catch that\'97try again?";\
    res.setHeader("Cache-Control", "no-store");\
    res.status(200).json(\{ reply \});\
  \} catch (e) \{\
    console.error(e);\
    res.status(500).json(\{ error: "AI request failed" \});\
  \}\
\}\
}